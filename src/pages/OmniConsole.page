<!--
Author:Sonal
Description: Automatically attaches Case or Contact or Lead to Transcript record if any of them is opened as a subtab.
-->

<apex:page showHeader="false" sidebar="false">
    <apex:includeScript value="/support/console/41.0/integration.js"/>
    <apex:includeScript value="{!URLFor($Resource.jQueryLatest,'jquery1.9.1.js')}"/>
    <script src="../../soap/ajax/39.0/connection.js" type="text/javascript"></script>
   
    <script type="text/javascript">
        sforce.connection.sessionId='{!GETSESSIONID()}';
        var primaryTabTranscriptId;
        var primaryTabTranscriptTabId;
        var transcriptRecordID;
        var setCaseObjectId = [];
        var setContactObjectId = [];
        var setLeadObjectId = [];
        var setObjectId = [];
        var querycaseResult;
        var queryContactResult;
        var queryLeadResult;
        var queryLiveChatTranscriptResult;
        var myinterval = null;
        var currentTab = false;
        var mapChatKeys = new Object();
        var transcriptName;
        var closedtab = true;
        var setTranscriptId = {};
        
        /*
            Called when the focus of the browser changes to a different primary tab. USed here to get TabID and Transcript ObjectID
                       
        */
        function getfocusedPrimaryTab() {
            console.log('getfocusedPrimaryTab called');
            return new Promise(function (resolve, reject) {
                try{
                setTimeout(function(){
                sforce.console.onFocusedPrimaryTab(function(result) {
                closedtab = true;
                primaryTabTranscriptId = result.objectId;
                if(setTranscriptId[primaryTabTranscriptId]) {
                    return;
                }
                console.log('Transcript Obj ID--'+primaryTabTranscriptId);
                primaryTabTranscriptTabId = result.id;
                console.log('Transcript Tab ID--'+primaryTabTranscriptTabId);
                fetchDetailsByPrimaryTabId();   
                });
                resolve('done');
                },1000);
                }
                catch(ex){
                    reject(ex);
                }
            });
        }
        
        /*To get the details of the focused TabID such as chatkey 
         Here, using chatkey as the key and putting TabID and its ObjectID in the map
        
        */
        function fetchDetailsByPrimaryTabId() {
           return new Promise(function (resolve, reject) {
           sforce.console.chat.getDetailsByPrimaryTabId(primaryTabTranscriptTabId, function(result){
                if (result.success == true) {
                    chatKey = result.details.chatKey;
                    var tabInfo = new Object();
                    tabInfo.primaryTabTranscriptId = primaryTabTranscriptId;
                    tabInfo.primaryTabTranscriptTabId = primaryTabTranscriptTabId;
                    if ((chatKey in mapChatKeys) == false)
                    {
                        mapChatKeys[chatKey] = tabInfo;
                        setTranscriptId[primaryTabTranscriptId] = true;
                    }
                }   
                });
                resolve('fetchDetailsByPrimaryTabId excuted');
           });
           }
        /*
        Called when a chat ends and getting the chatkey of the ended chat and fetching its related TabID and TranscriptObjectId 
        
        */   
        function onChatEnd(){
        return new Promise(function (resolve, reject) {
        try{
        setTimeout(function(){  
        sforce.console.chat.onChatEnded(function (result) {
            console.log("We are on event onChatEnded");
            currentTab = true;
            var chatKey = result.chatKey;
            var tabInfo = mapChatKeys[chatKey];
            primaryTabTranscriptId = tabInfo.primaryTabTranscriptId;
            console.log('primaryTabTranscriptId'+primaryTabTranscriptId); //correct
            primaryTabTranscriptTabId = tabInfo.primaryTabTranscriptTabId;
            chatTranscriptID = [];
            if(primaryTabTranscriptTabId!=null)
            {   
                setTimeout(getSubtabsInfo,1000) 
                console.log('primaryTabTranscriptId'+primaryTabTranscriptId);
                chatTranscriptID.push(tabInfo.primaryTabTranscriptId); 
                transcriptRec = sforce.connection.query('Select Id,Name from LiveChatTranscript where Id in (\'' + chatTranscriptID.join('\',\'') + '\')' );
                transcriptRecord = transcriptRec.getArray("records");
                console.log('TranscriptRecord--'+transcriptRecord); 
                transcriptRecordID = transcriptRecord[0].Id;
                console.log('-- QueryResult TranscriptId-'+transcriptRecordID); 
            }
        });
        resolve('eventChatHandler executed');
        },1000);
        }
        catch(ex){
            reject(ex);
            console.log('Error');
        }
        });
        }
        /*
        To get the information of subtabs opened under the focused primary tab, to know if the subtabs opened are of Case, Contact or Lead
        */
        function getSubtabsInfo() {
            console.log('Subtabs func called');
            return new Promise(function (resolve, reject) {
                try{
                    setTimeout(function(){
                    sforce.console.getSubtabIds(primaryTabTranscriptTabId, function(resulttabs){
                    console.log('primaryTabTranscriptTabId'+primaryTabTranscriptTabId); 
                    setCaseObjectId = [];
                    setContactObjectId = [];
                    setLeadObjectId = [];
                    console.log("We are on event getSubtabIds");
                    var ids=resulttabs.ids;
                    console.log('subTabs length-->'+ids.length);
                    function checkTranscriptIsCreated() {
                        if(ids != null) {
                            clearInterval(myinterval);
                            var increment = 0;
                            for(i=0;i<ids.length;i++)
                            {
                                sforce.console.getPageInfo(ids[i],function(pageinformation){  
                                    console.log('getPageInfo');
                                    if((pageinformation!=null || pageinformation!=undefined) && pageinformation.hasOwnProperty('pageInfo')){
                                        pinfo = JSON.parse(pageinformation.pageInfo);
                                        if((pinfo!=null || pinfo!=undefined) && pinfo.hasOwnProperty('objectId') && pinfo.objectId!=null){  
                                            if(pinfo.objectId.substr(0, 3) == '500') {
                                                setCaseObjectId.push(pinfo.objectId);
                                                console.log('setCaseObjectId');
                                            } else if(pinfo.objectId.substr(0, 3) == '003') {
                                                setContactObjectId.push(pinfo.objectId);
                                                
                                            } else if(pinfo.objectId.substr(0, 3) == '00Q') {
                                                setLeadObjectId.push(pinfo.objectId);
                                            }
                                            clearInterval(myinterval);
                                        }
                                        increment++;
                                        
                                        if(ids.length == increment) {
                                        //setTimeout(updateLiveChatTranscript,10000)
                                        updateLiveChatTranscript();
                                        }
                                    }
                                });
                                
                            }
                            
                        }
                    }
                    myinterval = setInterval(checkTranscriptIsCreated,1000);
                   
                });
                    resolve('done');
                },1000);
                }
         catch(ex){
        reject(ex);
        }
        resolve('done');
    });
    }
        
        /*
        Updating Transcript record depending on various scenarios
    
        */
        
        function updateLiveChatTranscript() {
            return new Promise(function(resolve, reject) {
            try{
            console.log("updateLiveChatTranscript func called");
            var liveChatTranscriptObj = new sforce.SObject("LiveChatTranscript");
            var contactRecords = null;
            var caseRecords = null;
            var leadRecords = null;
            var selectedCase = false;
            var selectedContact = false;
        
            if(setCaseObjectId.length == 1) {
                querycaseResult = sforce.connection.query('Select Id, CaseNumber, ContactId  from Case where Id in (\'' + setCaseObjectId.join('\',\'') + '\')' );
                caseRecords = querycaseResult.getArray("records");
                
            }
            
            if(setContactObjectId.length == 1) {
                queryContactResult = sforce.connection.query('Select Id, Name from Contact where Id in (\'' + setContactObjectId.join('\',\'') + '\')' );
                contactRecords = queryContactResult.getArray("records");
            }
            if(setLeadObjectId.length == 1) {
                queryLeadResult = sforce.connection.query('Select Id, Name from Lead where Id in (\'' + setLeadObjectId.join('\',\'') + '\')' );
                leadRecords = queryLeadResult.getArray("records");
            }
            
            
            if(caseRecords != undefined && caseRecords.length > 0 ) {
                
               
                liveChatTranscriptObj.Id = transcriptRecordID;
                liveChatTranscriptObj.CaseId = caseRecords[0].Id;
                
            }
            
            if(contactRecords != undefined && contactRecords.length > 0 && caseRecords != undefined && caseRecords.length > 0 ) {
                for(i=0; i<contactRecords.length; i++){
                if(contactRecords[i].Id == caseRecords[i].ContactId){
                
                liveChatTranscriptObj.Id = transcriptRecordID;
                liveChatTranscriptObj.ContactId = contactRecords[0].Id;
            }
            }
            }
            
            if(contactRecords != undefined && contactRecords.length > 0  && caseRecords == undefined){
                liveChatTranscriptObj.Id = transcriptRecordID;
                liveChatTranscriptObj.ContactId = contactRecords[0].Id;
            }
            if(leadRecords != undefined && leadRecords.length > 0 ) {
                liveChatTranscriptObj.Id = transcriptRecordID;
                liveChatTranscriptObj.LeadId = leadRecords[0].Id;
            }   
       
            update_result = sforce.connection.update([liveChatTranscriptObj]);
            console.log('UpdateCase----'+liveChatTranscriptObj.CaseId);
            console.log('update_result----'+update_result);
            
             
            if (update_result[0].getBoolean("success")) {
                console.log("Update Successful")
                
             } else{
                console.log("failed to update:" + update_result[0].errors.fields + " " + update_result[0].errors.message);
            }
          }
       
        catch(ex){
            reject(ex);
        }
        resolve('updateLiveChatTranscript executed');       
       });   
        }
        
        
        /*
        This is a callback function of CLOSE_TAB event, displaying an alert.
        */
        var onEnclosingPrimaryTabClose= function (result) {
         console.log('result='+result);
         transcriptRecords = null;
         setObjectId = [];
         if(result.objectId.substr(0, 3) == '570' && closedtab == true) {
            setObjectId.push(result.objectId);
            
        } 
                queryLiveChatTranscriptResult = sforce.connection.query('Select Id, Name, CaseId,ContactId,LeadId from LiveChatTranscript where Id in (\'' + setObjectId.join('\',\'') + '\')' );
                transcriptRecords = queryLiveChatTranscriptResult.getArray("records");
                console.log('transcriptRecords'+transcriptRecords);
             if(transcriptRecords != undefined && transcriptRecords.length > 0) {
                for(var i =0; i < transcriptRecords.length; i++) {
                    if(transcriptRecords[i].CaseId == null && transcriptRecords[i].ContactId == null && transcriptRecords[i].LeadId == null){
                    alert('Please attach chat transcript to appropriate case, contact or lead.');
                    closedtab = false;
                    }
                }
            }
              
        };
        sforce.console.addEventListener(sforce.console.ConsoleEvent.CLOSE_TAB,onEnclosingPrimaryTabClose); 
     

/* Execution starts --- 
*/   
      getfocusedPrimaryTab()
        .then(fetchDetailsByPrimaryTabId)
      onChatEnd()
            
               
        
    </script>
   
</apex:page>