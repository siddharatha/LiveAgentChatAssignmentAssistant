<!--
Author:Sonal
Description: Automatically attaches Case or Contact or Lead to Transcript record if any of them is opened as a subtab.
-->

<apex:page showHeader="false" sidebar="false">
    <apex:includeScript value="/support/console/41.0/integration.js" />
    <apex:includeScript value="{!URLFor($Resource.lodash)}" />
    <script src="../../soap/ajax/39.0/connection.js" type="text/javascript"></script>

    <script type="text/javascript">
        sforce.connection.sessionId = '{!GETSESSIONID()}';
        var schat = sforce.console.chat;
        var sconsole = sforce.console;

        function getLiveChatTranscriptTabID() {
            return new Promise(function (resolve, reject) {
                sconsole.getFocusedPrimaryTabId(function (result) {
                    resolve(result.id);
                });
            });
        }

        function getLiveChatTranscriptRecordID() {
            return new Promise(function (resolve, reject) {
                sconsole.getFocusedPrimaryTabObjectId(function (result) {
                    resolve(result.id);
                });
            });
        }

        function getRelatedObjectsIds(liveChatTranscriptTabId) {
            return new Promise(function (resolve, reject) {
                sconsole.getSubtabIds(liveChatTranscriptTabId, function (resulttabs) {
                    var promisearray = [];
                    resulttabs.forEach(function (eachSubTabId) {
                        promisearray.push(getObjectInfoFromTabId(eachSubTabId));
                    });
                    Promise.all(promisearray).then(function (lstPageInformation) {
                        lstPageInformation = lstPageInformation.filter(function (pageInfo) {
                            return pageInfo;
                        });
                        var mapObjectsToAttachToTranscript = _.mapKeys(
                            _.flatten(
                                _.filter(
                                    _.values(
                                        _.map(_.groupBy(lstPageInformation, "object"),
                                            function (item) {
                                                if (item.length === 1) return item;
                                            })
                                    )
                                )
                            ),
                            "object",
                            "id"
                        );
                        resolve(mapObjectsToAttachToTranscript);
                    });
                });
            });
        }

        function updateLiveChatTranscriptRecord(
            mapObjectsToAttachToTranscript,
            liveChatTranscriptRecordID
        ) {
            return new Promise(function (resolve, reject) {
                var liveChatTranscriptRecord = new sforce.SObject("LiveChatTranscript");
                liveChatTranscriptRecord.Id = liveChatTranscriptRecordID;
                _.keys(mapObjectsToAttachToTranscript, function (eachObjectName) {
                    liveChatTranscriptRecord[eachObjectName + "Id"] = _.get(
                        mapObjectsToAttachToTranscript[eachObjectName],
                        "id"
                    );
                });
                var updateResult = sforce.connection.update([liveChatTranscriptRecord]);
                var mapUpdateResults = {};
                updateResult.forEach(function (eachUpdateResult) {
                    if (eachUpdateResult.getBoolean("success")) {
                        mapUpdateResults[eachUpdateResult.id] = {
                            success: true
                        };
                    } else {
                        mapUpdateResults[eachUpdateResult.id] = {
                            success: false,
                            errors: eachUpdateResult.errors
                        };
                    }
                });
                resolve(mapUpdateResults);
            });
        }

        function getObjectInfoFromTabId(tabId) {
            return new Promise(function (resolve, reject) {
                sconsole.getPageInfo(tabId, function (pageinformation) {
                    if (pageinformation.hasOwnProperty("objectName")) {
                        var requiredPageInfo = {
                            id: pageinformation.objectId,
                            object: pageinformation.objectName
                        };
                        resolve(requiredPageInfo);
                    } else {
                        resolve(null);
                    }
                });
            });
        }

        function handleChatEnd() {
            return new Promise(function (resolve, reject) {
                schat.onChatEnded(function (result) {
                    Promise.all(
                        [getLiveChatTranscriptTabID(),
                        getLiveChatTranscriptRecordID()]
                    ).then(function (results) {
                        var tabId = results[0];
                        var recordId = results[1];
                        getRelatedObjectsIds(getLiveChatTranscriptTabID)
                            .then(function (mapObjectsToAttachToTranscript) {
                                return updateLiveChatTranscriptRecord(
                                    mapObjectsToAttachToTranscript,
                                    recordId
                                );
                            })
                            .then(function (updateresults) {
                                console.log(updateresults);
                            });
                    });
                });
            });
        }

        // var onEnclosingPrimaryTabClose = function (result) {
        //     alert("Am throwing a dummy alert now");
        // };

        // sforce.console.addEventListener(
        //     sforce.console.ConsoleEvent.CLOSE_TAB,
        //     onEnclosingPrimaryTabClose
        // );

        // sconsole.addEventListener(
        //     sforce.console.ConsoleEvent.CLOSE_TAB,
        //     onEnclosingPrimaryTabClose
        // );

        handleChatEnd();
    </script>

</apex:page>