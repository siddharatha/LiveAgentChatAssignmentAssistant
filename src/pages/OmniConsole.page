<!--
Author:Sonal
Description: Automatically attaches Case or Contact or Lead to Transcript record if any of them is opened as a subtab.
-->

<apex:page showHeader="false" sidebar="false">
    <apex:includeScript value="/support/console/41.0/integration.js" />
    <apex:includeScript value="{!URLFor($Resource.lodash)}" />
    <script src="../../soap/ajax/41.0/connection.js" type="text/javascript"></script>

    <script type="text/javascript">
        sforce.connection.sessionId = '{!GETSESSIONID()}';
        const schat = sforce.console.chat;
        const sconsole = sforce.console;
        const monitorChatInterval = 5000; // 5 seconds
        let primaryTabByChatKey = {};
        let chatInterval = null;

        /**
         * Get the LiveChatTranscript Id - The focussed primary tab when the chat ends.
         * 
         * @returns {Promise} Promise object represents the String Id of the tab.
         */
        const getLiveChatTranscriptTabID = () => {
            return new Promise((resolve, reject) => {
                try {
                    sconsole.getFocusedPrimaryTabId(result => {
                        resolve(result.id);
                    });
                } catch (ex) {
                    reject(ex);
                }
            });
        }

        /**
         * Get the LiveChatTranscript Record Id - The record Id of the tab will be used for update later
         * 
         * @returns {Promise} Promise object represents the Record Id of the tab.
         */
        const getLiveChatTranscriptRecordID = () => {
            return new Promise((resolve, reject) => {
                try {
                    sconsole.getFocusedPrimaryTabObjectId(result => {
                        resolve(result.id);
                    });
                } catch (ex) {
                    reject(ex);
                }
            });
        }

        /**
         * Get the Details Subtab usually opened as the first one.
         * 
         * @param {String} tabId 
         * @returns {Promise} Promise object represents the String Id of Subtab.
         */
        const getDetailsTabID = (tabId) => {
            return new Promise((resolve, reject) => {
                try {
                    sconsole.getSubtabIds(tabId, result => {
                        let ids = _.split(result.ids, ',');
                        let subtabId = ids[0];
                        resolve(subtabId);
                    });
                } catch (ex) {
                    reject(ex);
                }
            });
        }

        /**
         * Refreshes the Details subtab of the Primary TabId passed.
         * 
         * @param {String} tabId 
         * @param {Boolean} active 
         * @returns {Promise} Promise object represents the Boolean success or failure of the refresh.
         */
        const refreshDetailsByTabId = (tabId, active) => {
            return new Promise((resolve, reject) => {
                try {
                    getDetailsTabID(tabId)
                        .then(subTabId => {
                            sconsole.refreshSubtabById(subTabId,
                                active, ({
                                    success
                                }) => resolve(success));
                        })
                        .catch(ex => {
                            reject(ex);
                        });
                } catch (ex) {
                    reject(ex);
                }
            });
        }


        /**
         * get the object info of the other  subtabs opened alongside the passed subtabid.
         * 
         * @param {String} liveChatTranscriptTabId 
         * @returns {Promise} Promise object represents the object with key as ObjectName and Value as the id and object.
         */
        const getSiblingTabObjectInfos = liveChatTranscriptTabId => {
            return new Promise((resolve, reject) => {
                try {
                    sconsole.getSubtabIds(liveChatTranscriptTabId, result => {
                        let subtabs = _.split(result.ids, ',');
                        let promises = _.map(subtabs, eachSubTabId => {
                            return getObjectInfoFromTabId(eachSubTabId);
                        });
                        Promise.all(promises).then(lstPageInformation => {
                            lstPageInformation = lstPageInformation.filter(pageInfo => {
                                return pageInfo;
                            });
                            let mapObjectsToAttachToTranscript = _.mapKeys(
                                _.flatten(
                                    _.filter(
                                        _.values(
                                            _.map(_.groupBy(lstPageInformation,
                                                    "object"),
                                                item => {
                                                    if (item.length === 1) return item;
                                                })
                                        )
                                    )
                                ),
                                "object",
                                "id"
                            );
                            resolve(mapObjectsToAttachToTranscript);
                        });
                    });
                } catch (ex) {
                    reject(ex)
                }
            });
        }

        /**
         * Takes the Sibling object info and The record Id to perform the update.
         * 
         * @param {Object} mapObjectsToAttachToTranscript 
         * @param {String} liveChatTranscriptRecordID 
         * @returns 
         */
        const updateLiveChatTranscriptRecord = (
            mapObjectsToAttachToTranscript,
            liveChatTranscriptRecordID,
            liveChatTranscriptRecordExisting
        ) => {
            return new Promise((resolve, reject) => {
                try {
                    let liveChatTranscriptRecord = new sforce.SObject("LiveChatTranscript");
                    liveChatTranscriptRecord.Id = liveChatTranscriptRecordID;
                    let hasSomeUpdate = false;
                    if(_.isEmpty(liveChatTranscriptRecordExisting.CaseId)){
                        liveChatTranscriptRecord.CaseId = _.get(mapObjectsToAttachToTranscript, 'Case.id');
                        hasSomeUpdate=true;
                    }
                    if(_.isEmpty(liveChatTranscriptRecordExisting.ContactId)){
                        liveChatTranscriptRecord.ContactId = _.get(mapObjectsToAttachToTranscript, 'Contact.id');
                        hasSomeUpdate=true;
                    }
                    if(_.isEmpty(liveChatTranscriptRecordExisting.LeadId)){
                        liveChatTranscriptRecord.LeadId = _.get(mapObjectsToAttachToTranscript, 'Lead.id');
                        hasSomeUpdate=true;
                    }
                    if(hasSomeUpdate){
                    let updateResult = sforce.connection.update([liveChatTranscriptRecord]);
                    let mapUpdateResults = {};
                    updateResult.forEach(eachUpdateResult => {
                        if (eachUpdateResult.getBoolean("success")) {
                            mapUpdateResults[eachUpdateResult.id] = {
                                success: true
                            };
                        } else {
                            mapUpdateResults[eachUpdateResult.id] = {
                                success: false,
                                errors: eachUpdateResult.errors
                            };
                        }
                    });
                    resolve(mapUpdateResults);
                    }
                    else
                    resolve(null);
                } catch (ex) {
                    reject(ex);
                }
            });
        }

        /**
         * get the object information when a tabId is passed.
         * 
         * @param {String} tabId 
         * @returns {Promise} A promise object with PageInformation only if its a object. A dictionary array of id and ObjectName.
         */
        const getObjectInfoFromTabId = tabId => {
            return new Promise((resolve, reject) => {
                try {
                    sconsole.getPageInfo(tabId, pageresult => {
                        if (pageresult.success) {
                            pageinformation = JSON.parse(_.get(pageresult, 'pageInfo'));
                            if (pageinformation.hasOwnProperty("object")) {
                                resolve({
                                    id: pageinformation.objectId,
                                    object: pageinformation.object,
                                    tabId: tabId
                                });
                            } else {
                                resolve(null);
                            }
                        } else {
                            resolve(null);
                        }
                    });
                } catch (ex) {
                    reject(ex);
                }
            });
        }

        /**
         * get the status of the existing LiveChatTranscript record
         *          
         * @returns {Promise} A promise object with the existing record maps
         */
        const checkLiveChatTranscriptStatus = recordId => {
            return new Promise((resolve, reject) => {
                try {                    
                    let result = sforce.connection.query(
                        `select id,CaseId,ContactId,LeadId from LiveChatTranscript where id = '${recordId}'`
                    );
                    let records = result.getArray("records");
                    let liveChatTranscriptRecord = _.get(records, 0);
                    let hasInfo = (liveChatTranscriptRecord.CaseId && liveChatTranscriptRecord.LeadId &&
                        liveChatTranscriptRecord.ContactId)
                    resolve({recordId:recordId,isEmpty:_.isEmpty(hasInfo),record:liveChatTranscriptRecord});                        
                } catch (ex) {
                    reject(ex);
                }
            });
        }

        /**
         * Handler for the ChatEnd of LiveAgent , ensures the sibling subtabs open alongside will be mapped to LiveAgentTranscript.
         * 
         * @param {Object} result with chatkey and success parameters. 
         * @returns {Promise} success or failure of the refresh after update.
         */
        const handleChatEnd = result => {
            return new Promise((resolve, reject) => {
                try {
                    const {
                        tabId,
                        recordId
                    } = _.get(primaryTabByChatKey, result.chatKey);
                    delete primaryTabByChatKey[result.chatKey];
                    checkLiveChatTranscriptStatus(recordId)
                        .then(({isEmpty,record}) => {
                            if (isEmpty) {
                                getSiblingTabObjectInfos(tabId)
                                    .then(mapObjectsToAttachToTranscript => {
                                        return updateLiveChatTranscriptRecord(
                                            mapObjectsToAttachToTranscript,
                                            recordId,
                                            record
                                        );
                                    })
                                    .then(updateresults => {
                                        if(updateresults){
                                            sconsole.disableTabClose(false,tabId,null);
                                            return refreshDetailsByTabId(tabId, false);
                                        }
                                        else
                                        return null;
                                    })
                            }
                        });
                } catch (ex) {
                    reject(ex)
                }
            });
        }
       
        /**
         * Promise wrapper to get the details of the chat based on chatkey
         * 
         * @param {Promise} Promise object with the chat details as a result. 
         * @returns 
         */
        const getDetailsByChatKey = (chatKey) => {
            return new Promise((resolve, reject) => {
                try {
                    schat.getDetailsByChatKey(chatKey, result => {
                        result.success ? resolve(result) : resolve(null)
                    });
                } catch (ex) {
                    resolve(null)
                }
            });
        }

        /**
         * Promise wrapper to get the list of all engaged chats
         * 
         * @param {Promise} Promise object with the list of chatkeys of engaged chats as a result.
         * @returns 
         */
        const getEngagedChats = () => {
            return new Promise((resolve, reject) => {
                schat.getEngagedChats(result => resolve(result.chatKey));
            });
        }

         /**
         * Execution chain which monitors the chats for appropriate assignments
         * Flow of execution is 
         *  - Get existing active or engaged chats with the details        
         *  - Get the object information from the tabs
         *  - Get the liveagenttranscript status
         *  - prepare the primaryTabByChatKey variable with the key as chatkey and value with the tabId,recordId and isEmpty attributes to be used at chatEnd.
         */
        const monitorChats = () => {
            chatInterval = setInterval(() => {
                getEngagedChats()
                    .then(allChatKeys => {
                        if (allChatKeys.length > 0) {
                            let chatKeyPromises = _.map(allChatKeys, eachChatKey => getDetailsByChatKey(
                                eachChatKey))
                            Promise.all(chatKeyPromises)
                                .then(chatKeyresults => {
                                    chatKeyresults = _.filter(chatKeyresults);
                                    let primiaryTabIdsObjectInfo = [];
                                    let liveChatTranscriptStatusInfo = [];
                                    let chatKeyByTabId = {};
                                    let chatKeyByRecordId = {};
                                    _.each(chatKeyresults, item => {
                                        primiaryTabIdsObjectInfo.push(
                                            getObjectInfoFromTabId(item.primaryTabId));
                                            if(primaryTabByChatKey.hasOwnProperty(item.details.chatKey))
                                                _.assign(primaryTabByChatKey[item.details.chatKey],{tabId: item.primaryTabId});
                                            else
                                                primaryTabByChatKey[item.details.chatKey] = {tabId: item.primaryTabId};                                       
                                        chatKeyByTabId[item.primaryTabId] = item.details.chatKey;
                                    });
                                    if (chatKeyresults.length > 0) {                                        
                                        Promise.all(primiaryTabIdsObjectInfo)
                                            .then(objectresults => {
                                                _.each(objectresults, eachObjectResult => {
                                                    if (!_.isEmpty(eachObjectResult) && chatKeyByTabId.hasOwnProperty(
                                                            eachObjectResult.tabId)) {
                                                        let chatKeyToBeAssigned = _.get(
                                                            chatKeyByTabId,
                                                            eachObjectResult.tabId
                                                        );
                                                        if(primaryTabByChatKey.hasOwnProperty(chatKeyToBeAssigned))
                                                        _.assign(primaryTabByChatKey[chatKeyToBeAssigned],{recordId: eachObjectResult.id});
                                                        else
                                                        primaryTabByChatKey[chatKeyToBeAssigned] = {recordId: eachObjectResult.id};                                                        
                                                        chatKeyByRecordId[eachObjectResult
                                                                .id]=chatKeyToBeAssigned;
                                                        liveChatTranscriptStatusInfo.push(checkLiveChatTranscriptStatus(eachObjectResult
                                                                .id));
                                                    }                                                    
                                                });
                                                return;
                                            })
                                            .then(()=>{
                                                Promise.all(liveChatTranscriptStatusInfo)
                                                .then(liveChatTranscriptStatusInfoResults=>{
                                                    _.each(liveChatTranscriptStatusInfoResults, eachObjectResult => {
                                                    if (!_.isEmpty(eachObjectResult) && chatKeyByRecordId.hasOwnProperty(
                                                            eachObjectResult.recordId)) {
                                                        let chatKeyToBeAssigned = _.get(
                                                            chatKeyByRecordId,
                                                            eachObjectResult.recordId
                                                        );
                                                        if(primaryTabByChatKey.hasOwnProperty(chatKeyToBeAssigned))
                                                        _.assign(primaryTabByChatKey[chatKeyToBeAssigned],{isEmpty: eachObjectResult.isEmpty});
                                                        else
                                                        primaryTabByChatKey[chatKeyToBeAssigned] = {isEmpty: eachObjectResult.isEmpty};                                                        
                                                        if(eachObjectResult.isEmpty)
                                                            sconsole.disableTabClose(true,primaryTabByChatKey[chatKeyToBeAssigned].tabId,re=>console.log(re));
                                                        else
                                                            sconsole.disableTabClose(false,primaryTabByChatKey[chatKeyToBeAssigned].tabId,re=>console.log(re));
                                                                                                                
                                                    }                                                    
                                                });
                                                return;
                                                });
                                            })
                                            .catch(ex => console.log(ex));
                                    }
                                });
                        }
                    });
            }, monitorChatInterval);
        }



        // Chat end Handler assignment
        schat.onChatEnded(handleChatEnd);    

        // initiate monitor of chats.
        monitorChats();
    </script>

</apex:page>