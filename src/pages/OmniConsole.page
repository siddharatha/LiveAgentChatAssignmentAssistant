<!--
Author:Sonal
Description: Automatically attaches Case or Contact or Lead to Transcript record if any of them is opened as a subtab.
-->

<apex:page showHeader="false" sidebar="false">
    <apex:includeScript value="/support/console/41.0/integration.js" />
    <apex:includeScript value="{!URLFor($Resource.lodash)}" />
    <script src="../../soap/ajax/39.0/connection.js" type="text/javascript"></script>

    <script type="text/javascript">
        sforce.connection.sessionId = '{!GETSESSIONID()}';
        const schat = sforce.console.chat;
        const sconsole = sforce.console;

        const getLiveChatTranscriptTabID = () => {
            return new Promise((resolve, reject) => {
                sconsole.getFocusedPrimaryTabId(result => {
                    resolve(result.id);
                });
            });
        }

        const getLiveChatTranscriptRecordID = () => {
            return new Promise((resolve, reject) => {
                sconsole.getFocusedPrimaryTabObjectId(result => {
                    resolve(result.id);
                });
            });
        }

        const getRelatedObjectsIds = liveChatTranscriptTabId => {
            return new Promise((resolve, reject) => {
                sconsole.getSubtabIds(liveChatTranscriptTabId, resulttabs => {
                    let promises = _.map(resulttabs, eachSubTabId => {
                        return getObjectInfoFromTabId(eachSubTabId);
                    });
                    Promise.all(promises).then(lstPageInformation => {
                        lstPageInformation = lstPageInformation.filter(pageInfo => {
                            return pageInfo;
                        });
                        let mapObjectsToAttachToTranscript = _.mapKeys(
                            _.flatten(
                                _.filter(
                                    _.values(
                                        _.map(_.groupBy(lstPageInformation, "object"),
                                            item => {
                                                if (item.length === 1) return item;
                                            })
                                    )
                                )
                            ),
                            "object",
                            "id"
                        );
                        resolve(mapObjectsToAttachToTranscript);
                    });
                });
            });
        }

        const updateLiveChatTranscriptRecord = (
            mapObjectsToAttachToTranscript,
            liveChatTranscriptRecordID
        ) => {
            return new Promise((resolve, reject) => {
                let liveChatTranscriptRecord = new sforce.SObject("LiveChatTranscript");
                liveChatTranscriptRecord.Id = liveChatTranscriptRecordID;
                _.keys(mapObjectsToAttachToTranscript, eachObjectName => {
                    liveChatTranscriptRecord[eachObjectName + "Id"] = _.get(
                        mapObjectsToAttachToTranscript[eachObjectName],
                        "id"
                    );
                });
                let updateResult = sforce.connection.update([liveChatTranscriptRecord]);
                let mapUpdateResults = {};
                updateResult.forEach(eachUpdateResult => {
                    if (eachUpdateResult.getBoolean("success")) {
                        mapUpdateResults[eachUpdateResult.id] = {
                            success: true
                        };
                    } else {
                        mapUpdateResults[eachUpdateResult.id] = {
                            success: false,
                            errors: eachUpdateResult.errors
                        };
                    }
                });
                resolve(mapUpdateResults);
            });
        }

        const getObjectInfoFromTabId = tabId=>{
            return new Promise((resolve, reject) => {
                sconsole.getPageInfo(tabId, pageinformation => {
                    if (pageinformation.hasOwnProperty("objectName")) {
                        let requiredPageInfo = {
                            id: pageinformation.objectId,
                            object: pageinformation.objectName
                        };
                        resolve(requiredPageInfo);
                    } else {
                        resolve(null);
                    }
                });
            });
        }

        const handleChatEnd = () => {
            return new Promise((resolve, reject) => {
                schat.onChatEnded(result => {
                    Promise.all(
                        [getLiveChatTranscriptTabID(),
                            getLiveChatTranscriptRecordID()
                        ]
                    ).then(values => {
                        let tabId = values[0];
                        let recordId = values[1];
                        getRelatedObjectsIds(tabId)
                            .then(mapObjectsToAttachToTranscript => {
                                return updateLiveChatTranscriptRecord(
                                    mapObjectsToAttachToTranscript,
                                    recordId
                                );
                            })
                            .then(updateresults => {
                                console.log(updateresults);
                            });
                    });
                });
            });
        }

        // let onEnclosingPrimaryTabClose = result => {
        //     alert("Am throwing a dummy alert now");
        // };

        // sforce.console.addEventListener(
        //     sforce.console.ConsoleEvent.CLOSE_TAB,
        //     onEnclosingPrimaryTabClose
        // );

        // sconsole.addEventListener(
        //     sforce.console.ConsoleEvent.CLOSE_TAB,
        //     onEnclosingPrimaryTabClose
        // );

        handleChatEnd();
    </script>

</apex:page>